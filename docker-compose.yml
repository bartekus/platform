x-logging: &default-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "6"

networks:
  net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    command:
      - "--api.dashboard=true"  # enable dashboard (no insecure)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=net"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./.local-infra/traefik/dynamic:/etc/traefik/dynamic:ro"
      - "./.local-infra/certs:/certs:ro"
    networks:
      - net
    env_file:
      - .env.local
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tkd.rule=Host(`${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.tkd.entrypoints=websecure"
      - "traefik.http.routers.tkd.tls=true"
      - "traefik.http.routers.tkd.service=api@internal"
      # BasicAuth
      - "traefik.http.middlewares.tkd-basicauth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.tkd.middlewares=tkd-basicauth"
    logging: *default-logging

  dozzle:
    image: amir20/dozzle:v8.14
    container_name: dozzle
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
    env_file:
      - .env.local
    environment:
      DOZZLE_NO_ANALYTICS: true
      DOZZLE_AUTH_PROVIDER: "none"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.routers.dozzle.service=dozzle"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
      # BasicAuth
      - "traefik.http.middlewares.dozzle-basicauth.basicauth.users=${DOZZLE_BASIC_AUTH}"
      - "traefik.http.routers.dozzle.middlewares=dozzle-basicauth@docker"
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s

  db:
    image: encoredotdev/postgres:15
    container_name: db
    ports:
      - "5433:5432"  # Expose PostgreSQL port to host
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db:/docker-entrypoint-initdb.d  # Mount initialization scripts
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Used by scripts/db/pg-init.sh
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
      - DB_ADMIN_USER=${DB_ADMIN_USER}
      - DB_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD}
      - DB_ADMIN_ACCESS=${DB_ADMIN_ACCESS}
      - LOGTO_DB_NAME=${POSTGRES_LOGTO_DB}
    networks:
      - net
    env_file:
      - .env.local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

  redis:
    image: redis:8
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *default-logging

  logto:
    image: ghcr.io/logto-io/logto:1.31
    container_name: logto
    restart: always
    depends_on:
      - db
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "logto.localdev.online:host-gateway"
      - "logto-admin.localdev.online:host-gateway"
      - "api.localdev.online:host-gateway"          # optional if calling it server-side
      - "web.localdev.online:host-gateway"          # optional
    entrypoint: [ "sh", "-c", "./packages/cli/custom-setup/entrypoint.sh" ]
    #    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    environment:
      - TRUST_PROXY_HEADER=1
      - ENDPOINT=https://${LOGTO_DOMAIN}
      - ADMIN_ENDPOINT=https://${LOGTO_ADMIN_DOMAIN}
      - DB_URL=postgres://${POSTGRES_LOGTO_USER}:${POSTGRES_LOGTO_PASSWORD}@db:5432/${POSTGRES_LOGTO_DB}
      # App Specific
      - APP_NAME=platform
      - APP_DESCRIPTION="Baseline for organization workflows automation"
      - APP_URI=${WEB_DOMAIN}
      - APP_URL=https://${WEB_DOMAIN}
      # Logto Specific
      - LOGTO_APP_ID=${LOGTO_APP_ID}
      - LOGTO_APP_SECRET=${LOGTO_APP_SECRET}
      - LOGTO_APP_API_RESOURCE=https://${API_DOMAIN}/api
      - LOGTO_APP_API_EVENT_WEBHOOK_URL=https://${API_DOMAIN}/stripe/logto/webhook
      - LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY=${LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY}
      - LOGTO_MANAGEMENT_API_RESOURCE=https://${LOGTO_DOMAIN}/api
      - LOGTO_MANAGEMENT_API_APPLICATION_ID=${LOGTO_MANAGEMENT_API_APPLICATION_ID}
      - LOGTO_MANAGEMENT_API_APPLICATION_SECRET=${LOGTO_MANAGEMENT_API_APPLICATION_SECRET}
      - LOGTO_GOOGLE_CONNECTOR_ID=${LOGTO_GOOGLE_CONNECTOR_ID}
      - LOGTO_GOOGLE_CLIENT_ID=${LOGTO_GOOGLE_CLIENT_ID}
      - LOGTO_GOOGLE_CLIENT_SECRET=${LOGTO_GOOGLE_CLIENT_SECRET}
      - NODE_EXTRA_CA_CERTS=/etc/ssl/certs/mkcert-rootCA.pem
    volumes:
      - ./scripts/logto:/etc/logto/packages/cli/custom-setup
      - ./.local-infra/certs/mkcert-rootCA.pem:/etc/ssl/certs/mkcert-rootCA.pem:ro
    networks:
      - net
    env_file:
      - .env.local
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      # Core (port 3001)
      - "traefik.http.routers.logto.rule=Host(`${LOGTO_DOMAIN}`)"
      - "traefik.http.routers.logto.entrypoints=websecure"
      - "traefik.http.routers.logto.tls=true"
      - "traefik.http.routers.logto.service=logto"
      - "traefik.http.services.logto.loadbalancer.server.port=3001"
      # Admin (port 3002)
      - "traefik.http.routers.logto-admin.rule=Host(`${LOGTO_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.logto-admin.entrypoints=websecure"
      - "traefik.http.routers.logto-admin.tls=true"
      - "traefik.http.routers.logto-admin.service=logto-admin"
      - "traefik.http.services.logto-admin.loadbalancer.server.port=3002"
    healthcheck:
      # Return 0 only if we get HTTP 204
      test: [ "CMD-SHELL", "apk add --no-cache curl >/dev/null 2>&1 || true; code=$(curl -fsS -o /dev/null -w '%{http_code}' http://127.0.0.1:3001/api/status || echo x); [ \"$code\" = \"204\" ]" ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 40s
    logging: *default-logging

  pgweb:
    image: sosedoff/pgweb:0.16.2
    container_name: pgweb
    restart: always
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${DB_ADMIN_USER}:${DB_ADMIN_PASSWORD}@db:5432/${POSTGRES_LOGTO_DB}?sslmode=disable
    depends_on:
      - db
    networks:
      - net
    env_file:
      - .env.local
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
      - "traefik.http.routers.pgweb.rule=Host(`${PGWEB_DOMAIN}`)"
      - "traefik.http.routers.pgweb.entrypoints=websecure"
      - "traefik.http.routers.pgweb.tls=true"
      - "traefik.http.routers.pgweb.service=pgweb"
      # BasicAuth
      - "traefik.http.middlewares.pgweb-basicauth.basicauth.users=${PGWEB_BASIC_AUTH}"
      - "traefik.http.routers.pgweb.middlewares=pgweb-basicauth@docker"
    logging: *default-logging

   # In local dev
   # we rely on encore.ts for our api development
   # likewise we, for web we leverage vite server functionality
   # Lastly we treat local development setup as stateless in a sense that all the data required for the development is seeded as part of the local-start process


