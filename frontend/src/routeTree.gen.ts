/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as CallbackRouteImport } from './routes/callback'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as ApiUsersRouteImport } from './routes/api/users'
import { Route as ApiTodosRouteImport } from './routes/api/todos'
import { Route as ApiProjectsRouteImport } from './routes/api/projects'
import { Route as ApiTrpcSplatRouteImport } from './routes/api/trpc/$'
import { Route as AuthenticatedProjectProjectIdRouteImport } from './routes/_authenticated/project/$projectId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const CallbackRoute = CallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const ApiUsersRoute = ApiUsersRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTodosRoute = ApiTodosRouteImport.update({
  id: '/api/todos',
  path: '/api/todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiProjectsRoute = ApiProjectsRouteImport.update({
  id: '/api/projects',
  path: '/api/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTrpcSplatRoute = ApiTrpcSplatRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedProjectProjectIdRoute =
  AuthenticatedProjectProjectIdRouteImport.update({
    id: '/project/$projectId',
    path: '/project/$projectId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/api/projects': typeof ApiProjectsRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/users': typeof ApiUsersRoute
  '/': typeof AuthenticatedIndexRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesByTo {
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/api/projects': typeof ApiProjectsRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/users': typeof ApiUsersRoute
  '/': typeof AuthenticatedIndexRoute
  '/project/$projectId': typeof AuthenticatedProjectProjectIdRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/callback': typeof CallbackRoute
  '/login': typeof LoginRoute
  '/api/projects': typeof ApiProjectsRoute
  '/api/todos': typeof ApiTodosRoute
  '/api/users': typeof ApiUsersRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/project/$projectId': typeof AuthenticatedProjectProjectIdRoute
  '/api/trpc/$': typeof ApiTrpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/callback'
    | '/login'
    | '/api/projects'
    | '/api/todos'
    | '/api/users'
    | '/'
    | '/project/$projectId'
    | '/api/trpc/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/callback'
    | '/login'
    | '/api/projects'
    | '/api/todos'
    | '/api/users'
    | '/'
    | '/project/$projectId'
    | '/api/trpc/$'
  id:
    | '__root__'
    | '/_authenticated'
    | '/callback'
    | '/login'
    | '/api/projects'
    | '/api/todos'
    | '/api/users'
    | '/_authenticated/'
    | '/_authenticated/project/$projectId'
    | '/api/trpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  CallbackRoute: typeof CallbackRoute
  LoginRoute: typeof LoginRoute
  ApiProjectsRoute: typeof ApiProjectsRoute
  ApiTodosRoute: typeof ApiTodosRoute
  ApiUsersRoute: typeof ApiUsersRoute
  ApiTrpcSplatRoute: typeof ApiTrpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/todos': {
      id: '/api/todos'
      path: '/api/todos'
      fullPath: '/api/todos'
      preLoaderRoute: typeof ApiTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/projects': {
      id: '/api/projects'
      path: '/api/projects'
      fullPath: '/api/projects'
      preLoaderRoute: typeof ApiProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/project/$projectId': {
      id: '/_authenticated/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof AuthenticatedProjectProjectIdRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedProjectProjectIdRoute: typeof AuthenticatedProjectProjectIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedProjectProjectIdRoute: AuthenticatedProjectProjectIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  CallbackRoute: CallbackRoute,
  LoginRoute: LoginRoute,
  ApiProjectsRoute: ApiProjectsRoute,
  ApiTodosRoute: ApiTodosRoute,
  ApiUsersRoute: ApiUsersRoute,
  ApiTrpcSplatRoute: ApiTrpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
