/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrgOrgIdRouteImport } from './routes/org.$orgId'
import { Route as OnboardingVerifyRouteImport } from './routes/onboarding.verify'
import { Route as OnboardingSubscriptionRouteImport } from './routes/onboarding.subscription'
import { Route as OnboardingProfileRouteImport } from './routes/onboarding.profile'
import { Route as OnboardingOrganizationRouteImport } from './routes/onboarding.organization'
import { Route as AuthSignoutRouteImport } from './routes/_auth.signout'
import { Route as AuthSigninRouteImport } from './routes/_auth.signin'
import { Route as AuthCallbackRouteImport } from './routes/_auth.callback'
import { Route as OrgOrgIdIndexRouteImport } from './routes/org.$orgId.index'
import { Route as OrgOrgIdWorkspacesRouteImport } from './routes/org.$orgId.workspaces'
import { Route as OrgOrgIdSettingsRouteImport } from './routes/org.$orgId.settings'
import { Route as OrgOrgIdMembersRouteImport } from './routes/org.$orgId.members'
import { Route as OrgOrgIdAdminRouteImport } from './routes/org.$orgId.admin'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgOrgIdRoute = OrgOrgIdRouteImport.update({
  id: '/org/$orgId',
  path: '/org/$orgId',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingVerifyRoute = OnboardingVerifyRouteImport.update({
  id: '/onboarding/verify',
  path: '/onboarding/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingSubscriptionRoute = OnboardingSubscriptionRouteImport.update({
  id: '/onboarding/subscription',
  path: '/onboarding/subscription',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingProfileRoute = OnboardingProfileRouteImport.update({
  id: '/onboarding/profile',
  path: '/onboarding/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const OnboardingOrganizationRoute = OnboardingOrganizationRouteImport.update({
  id: '/onboarding/organization',
  path: '/onboarding/organization',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignoutRoute = AuthSignoutRouteImport.update({
  id: '/_auth/signout',
  path: '/signout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSigninRoute = AuthSigninRouteImport.update({
  id: '/_auth/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/_auth/callback',
  path: '/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const OrgOrgIdIndexRoute = OrgOrgIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => OrgOrgIdRoute,
} as any)
const OrgOrgIdWorkspacesRoute = OrgOrgIdWorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => OrgOrgIdRoute,
} as any)
const OrgOrgIdSettingsRoute = OrgOrgIdSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => OrgOrgIdRoute,
} as any)
const OrgOrgIdMembersRoute = OrgOrgIdMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => OrgOrgIdRoute,
} as any)
const OrgOrgIdAdminRoute = OrgOrgIdAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => OrgOrgIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/callback': typeof AuthCallbackRoute
  '/signin': typeof AuthSigninRoute
  '/signout': typeof AuthSignoutRoute
  '/onboarding/organization': typeof OnboardingOrganizationRoute
  '/onboarding/profile': typeof OnboardingProfileRoute
  '/onboarding/subscription': typeof OnboardingSubscriptionRoute
  '/onboarding/verify': typeof OnboardingVerifyRoute
  '/org/$orgId': typeof OrgOrgIdRouteWithChildren
  '/org/$orgId/admin': typeof OrgOrgIdAdminRoute
  '/org/$orgId/members': typeof OrgOrgIdMembersRoute
  '/org/$orgId/settings': typeof OrgOrgIdSettingsRoute
  '/org/$orgId/workspaces': typeof OrgOrgIdWorkspacesRoute
  '/org/$orgId/': typeof OrgOrgIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/callback': typeof AuthCallbackRoute
  '/signin': typeof AuthSigninRoute
  '/signout': typeof AuthSignoutRoute
  '/onboarding/organization': typeof OnboardingOrganizationRoute
  '/onboarding/profile': typeof OnboardingProfileRoute
  '/onboarding/subscription': typeof OnboardingSubscriptionRoute
  '/onboarding/verify': typeof OnboardingVerifyRoute
  '/org/$orgId/admin': typeof OrgOrgIdAdminRoute
  '/org/$orgId/members': typeof OrgOrgIdMembersRoute
  '/org/$orgId/settings': typeof OrgOrgIdSettingsRoute
  '/org/$orgId/workspaces': typeof OrgOrgIdWorkspacesRoute
  '/org/$orgId': typeof OrgOrgIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth/callback': typeof AuthCallbackRoute
  '/_auth/signin': typeof AuthSigninRoute
  '/_auth/signout': typeof AuthSignoutRoute
  '/onboarding/organization': typeof OnboardingOrganizationRoute
  '/onboarding/profile': typeof OnboardingProfileRoute
  '/onboarding/subscription': typeof OnboardingSubscriptionRoute
  '/onboarding/verify': typeof OnboardingVerifyRoute
  '/org/$orgId': typeof OrgOrgIdRouteWithChildren
  '/org/$orgId/admin': typeof OrgOrgIdAdminRoute
  '/org/$orgId/members': typeof OrgOrgIdMembersRoute
  '/org/$orgId/settings': typeof OrgOrgIdSettingsRoute
  '/org/$orgId/workspaces': typeof OrgOrgIdWorkspacesRoute
  '/org/$orgId/': typeof OrgOrgIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/callback'
    | '/signin'
    | '/signout'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/onboarding/subscription'
    | '/onboarding/verify'
    | '/org/$orgId'
    | '/org/$orgId/admin'
    | '/org/$orgId/members'
    | '/org/$orgId/settings'
    | '/org/$orgId/workspaces'
    | '/org/$orgId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/callback'
    | '/signin'
    | '/signout'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/onboarding/subscription'
    | '/onboarding/verify'
    | '/org/$orgId/admin'
    | '/org/$orgId/members'
    | '/org/$orgId/settings'
    | '/org/$orgId/workspaces'
    | '/org/$orgId'
  id:
    | '__root__'
    | '/'
    | '/_auth/callback'
    | '/_auth/signin'
    | '/_auth/signout'
    | '/onboarding/organization'
    | '/onboarding/profile'
    | '/onboarding/subscription'
    | '/onboarding/verify'
    | '/org/$orgId'
    | '/org/$orgId/admin'
    | '/org/$orgId/members'
    | '/org/$orgId/settings'
    | '/org/$orgId/workspaces'
    | '/org/$orgId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignoutRoute: typeof AuthSignoutRoute
  OnboardingOrganizationRoute: typeof OnboardingOrganizationRoute
  OnboardingProfileRoute: typeof OnboardingProfileRoute
  OnboardingSubscriptionRoute: typeof OnboardingSubscriptionRoute
  OnboardingVerifyRoute: typeof OnboardingVerifyRoute
  OrgOrgIdRoute: typeof OrgOrgIdRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/$orgId': {
      id: '/org/$orgId'
      path: '/org/$orgId'
      fullPath: '/org/$orgId'
      preLoaderRoute: typeof OrgOrgIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/verify': {
      id: '/onboarding/verify'
      path: '/onboarding/verify'
      fullPath: '/onboarding/verify'
      preLoaderRoute: typeof OnboardingVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/subscription': {
      id: '/onboarding/subscription'
      path: '/onboarding/subscription'
      fullPath: '/onboarding/subscription'
      preLoaderRoute: typeof OnboardingSubscriptionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/profile': {
      id: '/onboarding/profile'
      path: '/onboarding/profile'
      fullPath: '/onboarding/profile'
      preLoaderRoute: typeof OnboardingProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/onboarding/organization': {
      id: '/onboarding/organization'
      path: '/onboarding/organization'
      fullPath: '/onboarding/organization'
      preLoaderRoute: typeof OnboardingOrganizationRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signout': {
      id: '/_auth/signout'
      path: '/signout'
      fullPath: '/signout'
      preLoaderRoute: typeof AuthSignoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/signin': {
      id: '/_auth/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof AuthSigninRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/callback': {
      id: '/_auth/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/org/$orgId/': {
      id: '/org/$orgId/'
      path: '/'
      fullPath: '/org/$orgId/'
      preLoaderRoute: typeof OrgOrgIdIndexRouteImport
      parentRoute: typeof OrgOrgIdRoute
    }
    '/org/$orgId/workspaces': {
      id: '/org/$orgId/workspaces'
      path: '/workspaces'
      fullPath: '/org/$orgId/workspaces'
      preLoaderRoute: typeof OrgOrgIdWorkspacesRouteImport
      parentRoute: typeof OrgOrgIdRoute
    }
    '/org/$orgId/settings': {
      id: '/org/$orgId/settings'
      path: '/settings'
      fullPath: '/org/$orgId/settings'
      preLoaderRoute: typeof OrgOrgIdSettingsRouteImport
      parentRoute: typeof OrgOrgIdRoute
    }
    '/org/$orgId/members': {
      id: '/org/$orgId/members'
      path: '/members'
      fullPath: '/org/$orgId/members'
      preLoaderRoute: typeof OrgOrgIdMembersRouteImport
      parentRoute: typeof OrgOrgIdRoute
    }
    '/org/$orgId/admin': {
      id: '/org/$orgId/admin'
      path: '/admin'
      fullPath: '/org/$orgId/admin'
      preLoaderRoute: typeof OrgOrgIdAdminRouteImport
      parentRoute: typeof OrgOrgIdRoute
    }
  }
}

interface OrgOrgIdRouteChildren {
  OrgOrgIdAdminRoute: typeof OrgOrgIdAdminRoute
  OrgOrgIdMembersRoute: typeof OrgOrgIdMembersRoute
  OrgOrgIdSettingsRoute: typeof OrgOrgIdSettingsRoute
  OrgOrgIdWorkspacesRoute: typeof OrgOrgIdWorkspacesRoute
  OrgOrgIdIndexRoute: typeof OrgOrgIdIndexRoute
}

const OrgOrgIdRouteChildren: OrgOrgIdRouteChildren = {
  OrgOrgIdAdminRoute: OrgOrgIdAdminRoute,
  OrgOrgIdMembersRoute: OrgOrgIdMembersRoute,
  OrgOrgIdSettingsRoute: OrgOrgIdSettingsRoute,
  OrgOrgIdWorkspacesRoute: OrgOrgIdWorkspacesRoute,
  OrgOrgIdIndexRoute: OrgOrgIdIndexRoute,
}

const OrgOrgIdRouteWithChildren = OrgOrgIdRoute._addFileChildren(
  OrgOrgIdRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignoutRoute: AuthSignoutRoute,
  OnboardingOrganizationRoute: OnboardingOrganizationRoute,
  OnboardingProfileRoute: OnboardingProfileRoute,
  OnboardingSubscriptionRoute: OnboardingSubscriptionRoute,
  OnboardingVerifyRoute: OnboardingVerifyRoute,
  OrgOrgIdRoute: OrgOrgIdRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
