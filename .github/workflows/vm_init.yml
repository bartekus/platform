name: VM Initialization

on:
  workflow_dispatch:
    inputs:
      droplet_ip:
        description: "Droplet IPv4"
        required: false
      droplet_ipv6:
        description: "Droplet IPv6"
        required: false
      host:
        description: "SSH host (fallback)"
        required: false
      user:
        description: "SSH username"
        required: false

env:
  ROOT_DIRECTORY: /opt

jobs:
  initialize_vm:
    runs-on: ubuntu-latest
    env:
      # Prefer explicit inputs, else the repo variables you already set (HOST/USER)
      TARGET_HOST: ${{ github.event.inputs.droplet_ip || github.event.inputs.host || vars.HOST }}
      TARGET_USER: ${{ github.event.inputs.user || vars.USER }}
      TARGET_IPV6: ${{ github.event.inputs.droplet_ipv6 }}
    steps:
      - name: Echo inputs (sanity)
        run: |
          echo "IP4=${{ env.TARGET_HOST }}"
          echo "IP6=${{ env.TARGET_IPV6 }}"
          echo "HOST=${{ env.TARGET_HOST }}"
          echo "USER=${{ env.TARGET_USER }}"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Ensure Docker & docker-rollout (idempotent)
        run: |
          set -Eeuo pipefail
          
          have() { command -v "$1" >/dev/null 2>&1; }
          
          echo "🔎 Checking Docker…"
          if have docker; then
            echo "✅ Docker already installed: $(docker --version)"
          else
            echo "⬇️ Installing Docker via get.docker.com…"
            for i in {1..3}; do
              curl -fsSL https://get.docker.com -o get-docker.sh && break || sleep 2
            done
            sh get-docker.sh
            docker --version
          fi
          
          echo "🔧 Ensuring Docker service is enabled & running…"
          if ! systemctl is-enabled --quiet docker; then
            sudo systemctl enable docker
          fi
          if ! systemctl is-active --quiet docker; then
            sudo systemctl start docker
          fi
          sudo systemctl status docker --no-pager -l | sed -n '1,5p'
          
          echo "🔎 Checking docker-rollout CLI plugin…"
          # docker CLI plugins live under ~/.docker/cli-plugins/docker-<name>
          PLUGDIR="${HOME}/.docker/cli-plugins"
          PLUGPATH="${PLUGDIR}/docker-rollout"
          if docker rollout --help >/dev/null 2>&1; then
            echo "✅ docker-rollout already available via Docker CLI"
            ls -l "$PLUGPATH" || true
          else
            echo "⬇️ Installing docker-rollout plugin…"
            mkdir -p "$PLUGDIR"
            RVER="v0.13"
            if curl -fsSL "https://raw.githubusercontent.com/wowu/docker-rollout/${RVER}/docker-rollout" \
                 -o "$PLUGPATH"; then
              echo "docker-rollout: pinned ${RVER}"
            else
              echo "docker-rollout: falling back to main"
              curl -fsSL "https://raw.githubusercontent.com/wowu/docker-rollout/main/docker-rollout" \
                -o "$PLUGPATH"
            fi
            chmod +x "$PLUGPATH"
            # Validate through Docker’s plugin dispatcher (not by executing the script directly)
            docker rollout --help >/dev/null
            echo "✅ docker-rollout installed at ${PLUGPATH}"
          fi
          
          echo "🔎 Current Docker info:"
          docker info --format '{{.ServerVersion}} (storage driver: {{.Driver}})' || true

      - name: Ensure user has docker group access (optional)
        env:
          TARGET_USER: ${{ env.TARGET_USER }}
        run: |
          set -Eeuo pipefail
          if [[ -n "${TARGET_USER:-}" && "${TARGET_USER}" != "root" ]]; then
            sudo groupadd -f docker
            if id -nG "${TARGET_USER}" | tr ' ' '\n' | grep -qx docker; then
              echo "✅ ${TARGET_USER} already in docker group"
            else
              echo "➕ Adding ${TARGET_USER} to docker group"
              sudo usermod -aG docker "${TARGET_USER}"
              echo "ℹ️  ${TARGET_USER} must re-login (or reboot) for group change to take effect."
            fi
          else
            echo "ℹ️  Skipping docker group update (user is root or not set)."
          fi

      - name: Give user ability to run docker and restart Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.HOST }}
          username: ${{ vars.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo usermod -aG docker $USER
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl restart docker
            elif command -v service >/dev/null 2>&1; then
              sudo service docker restart
            elif [ -f /etc/init.d/docker ]; then
              sudo /etc/init.d/docker restart
            else
              echo "Unable to restart Docker. Please restart it manually."
              exit 1
            fi

      - name: Validate Docker and Docker Compose Installation
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.HOST }}
          username: ${{ vars.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Validate Docker installation
            if ! command -v docker &> /dev/null; then
              echo "Docker is not installed or not in PATH"
              exit 1
            fi
            docker_version=$(docker --version)
            echo "Docker version: $docker_version"

            # Validate Docker Compose installation
            if ! command -v docker compose &> /dev/null; then
              echo "Docker Compose is not installed or not in PATH"
              exit 1
            fi
            compose_version=$(docker compose --version)
            echo "Docker Compose version: $compose_version"

            echo "Docker and docker compose have been installed. Server is ready to use 🎉🥳"