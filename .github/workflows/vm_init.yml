name: VM Initialization

on:
  workflow_dispatch:
    inputs:
      droplet_ip:
        description: "Droplet IPv4"
        required: false
      droplet_ipv6:
        description: "Droplet IPv6"
        required: false
      host:
        description: "SSH host (fallback)"
        required: false
      user:
        description: "SSH username"
        required: false

env:
  ROOT_DIRECTORY: /opt

jobs:
  initialize_vm:
    runs-on: ubuntu-latest
    env:
      TARGET_HOST: ${{ github.event.inputs.droplet_ip || github.event.inputs.host || vars.HOST }}
      TARGET_USER: ${{ github.event.inputs.user || vars.USER }}
      TARGET_IPV6: ${{ github.event.inputs.droplet_ipv6 }}

    steps:
      - name: Echo inputs (sanity)
        run: |
          echo "IP4=${{ env.TARGET_HOST }}"
          echo "IP6=${{ env.TARGET_IPV6 }}"
          echo "HOST=${{ env.TARGET_HOST }}"
          echo "USER=${{ env.TARGET_USER }}"
          test -n "${{ env.TARGET_HOST }}" || { echo "❌ TARGET_HOST is empty"; exit 1; }
          test -n "${{ env.TARGET_USER }}" || { echo "❌ TARGET_USER is empty"; exit 1; }

      - name: Checkout code
        uses: actions/checkout@v4

      # Everything from here happens ON THE VM over SSH
      - name: Install Docker quickly (fail-fast if apt busy)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: ${{ env.TARGET_USER }}
          key: ${{ secrets.SSH_KEY }}
          timeout: 7m
          command_timeout: 10m
          script_stop: true
          script: |
            set -Eeuo pipefail
            export DEBIAN_FRONTEND=noninteractive NEEDRESTART_MODE=a

            have() { command -v "$1" >/dev/null 2>&1; }
            locks_free() {
              ! pgrep -x apt >/dev/null 2>&1 && \
              ! pgrep -x apt-get >/dev/null 2>&1 && \
              ! pgrep -x dpkg >/dev/null 2>&1 && \
              [ ! -e /var/lib/apt/lists/lock ] && \
              [ ! -e /var/lib/dpkg/lock-frontend ] && \
              [ ! -e /var/lib/dpkg/lock ]
            }

            if have docker; then
              echo "✅ Docker present: $(docker --version)"
            else
              echo "🔎 Checking apt locks (max 25s)…"
              for i in $(seq 1 25); do
                if locks_free; then
                  echo "✅ Locks are free."
                  break
                fi
                sleep 1
              done
              if ! locks_free; then
                echo "❌ apt is busy (unattended upgrades / dpkg). Skipping install to stay fast."
                echo "   Re-run this job after first-boot housekeeping completes."
                exit 85
              fi

              # Install Docker quickly via official script (uses apt under the hood)
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              echo "✅ Docker installed: $(docker --version)"
            fi

            # Compose v2 plugin via static download (no apt)
            if docker compose version >/dev/null 2>&1; then
              echo "✅ docker compose present: $(docker compose version)"
            else
              VER="v2.29.7"
              sudo mkdir -p /usr/local/lib/docker/cli-plugins
              sudo curl -fsSL "https://github.com/docker/compose/releases/download/${VER}/docker-compose-$(uname -s)-$(uname -m)" \
                -o /usr/local/lib/docker/cli-plugins/docker-compose
              sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
              docker compose version
            fi

            # docker-rollout plugin
            PLUGDIR="${HOME}/.docker/cli-plugins"
            mkdir -p "$PLUGDIR"
            if ! docker rollout --help >/dev/null 2>&1; then
              RVER="v0.13"
              curl -fsSL "https://raw.githubusercontent.com/wowu/docker-rollout/${RVER}/docker-rollout" \
                -o "${PLUGDIR}/docker-rollout" \
                || curl -fsSL "https://raw.githubusercontent.com/wowu/docker-rollout/main/docker-rollout" \
                -o "${PLUGDIR}/docker-rollout"
              chmod +x "${PLUGDIR}/docker-rollout"
            fi
            echo "✅ docker-rollout ready"

            # Enable/start docker if systemd present
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl enable docker || true
              sudo systemctl restart docker || sudo systemctl start docker || true
            fi

            docker info --format 'Engine: {{.ServerVersion}}, Root: {{.DockerRootDir}}' || true

      - name: Validate Docker and Docker Compose on remote
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.TARGET_HOST }}
          username: ${{ env.TARGET_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -Eeuo pipefail
            command -v docker >/dev/null 2>&1 || { echo "❌ docker missing"; exit 1; }
            command -v docker >/dev/null 2>&1 && docker --version
            docker compose version || { echo '❌ docker compose missing'; exit 1; }
            echo "✅ Docker & Compose are ready on $(hostname)"
            # Confirm service is running when systemd is present
            if command -v systemctl >/dev/null 2>&1; then
              systemctl is-active --quiet docker && echo "✅ docker service is active" || (echo "❌ docker service not active"; systemctl --no-pager -l status docker; exit 1)
            fi
            echo "Server is ready to use 🎉"