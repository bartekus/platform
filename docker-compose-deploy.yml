version: "3.9"

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "6"

networks:
  net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:

services:
  traefik:
    image: traefik:v3.1
    restart: always
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks: [net]
    env_file: [.env]
    labels:
      - "traefik.enable=true"
      # Basic auth for dashboard
      - "traefik.http.middlewares.tkd-basicauth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      - "traefik.http.routers.tkd.rule=Host(`${TRAEFIK_DASHBOARD_DOMAIN}`)"
      - "traefik.http.routers.tkd.entrypoints=websecure"
      - "traefik.http.routers.tkd.tls=true"
      - "traefik.http.routers.tkd.service=api@internal"
      - "traefik.http.routers.tkd.middlewares=tkd-basicauth"
    logging: *default-logging

  db:
    image: encoredotdev/postgres:16
    container_name: postgres_db
    # Uncomment if you need host access:
    # ports:
    #   - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount init scripts prepared by CI (e.g., /opt/scripts/db/pg-init.sh)
      - /opt/scripts/db:/docker-entrypoint-initdb.d:ro
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Avoid trust; rely on password above
      # - POSTGRES_HOST_AUTH_METHOD=trust
    networks: [net]
    env_file: [.env]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    logging: *default-logging

  redis:
    image: redis:7.4-alpine
    container_name: redis
    # Internal only; expose if you truly need host access
    # ports:
    #   - "6379:6379"
    volumes:
      - redis_data:/data
    networks: [net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    logging: *default-logging

  logto:
    image: ghcr.io/logto-io/logto:1.18.0
    depends_on:
      db:
        condition: service_healthy
    entrypoint: ["sh", "-c", "./packages/cli/custom-setup/entrypoint.sh"]
    #    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    environment:
      - TRUST_PROXY_HEADER=1
      - ENDPOINT=https://${LOGTO_DOMAIN}
      - ADMIN_ENDPOINT=https://${LOGTO_ADMIN_DOMAIN}
      - DB_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/logto
      # App Specific
      - APP_NAME=platform
      - APP_DESCRIPTION=Baseline for organization workflows automation
      - APP_URI=${WEB_DOMAIN}
      - APP_URL=https://${WEB_DOMAIN}
      # Logto Specific
      - LOGTO_APP_ID=${LOGTO_APP_ID}
      - LOGTO_APP_SECRET=${LOGTO_APP_SECRET}
      - LOGTO_APP_API_RESOURCE=https://${API_DOMAIN}/api
      - LOGTO_APP_API_EVENT_WEBHOOK_URL=https://${API_DOMAIN}/api/stripe/logto/webhook
      - LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY=${LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY}
      - LOGTO_MANAGEMENT_API_RESOURCE=https://${LOGTO_DOMAIN}/api
      - LOGTO_MANAGEMENT_API_APPLICATION_ID=${LOGTO_MANAGEMENT_API_APPLICATION_ID}
      - LOGTO_MANAGEMENT_API_APPLICATION_SECRET=${LOGTO_MANAGEMENT_API_APPLICATION_SECRET}
      - LOGTO_GOOGLE_CONNECTOR_ID=${LOGTO_GOOGLE_CONNECTOR_ID}
      - LOGTO_GOOGLE_CLIENT_ID=${LOGTO_GOOGLE_CLIENT_ID}
      - LOGTO_GOOGLE_CLIENT_SECRET=${LOGTO_GOOGLE_CLIENT_SECRET}
    volumes:
      # Use the path your CI places files into:
      - /opt/scripts/logto:/etc/logto/packages/cli/custom-setup:ro
    networks: [net]
    env_file: [.env]
    labels:
      - "traefik.enable=true"
      # Core (port 3001)
      - "traefik.http.routers.logto.rule=Host(`${LOGTO_DOMAIN}`)"
      - "traefik.http.routers.logto.entrypoints=websecure"
      - "traefik.http.routers.logto.tls=true"
      - "traefik.http.routers.logto.tls.certresolver=myresolver"
      - "traefik.http.routers.logto.service=logto"
      - "traefik.http.services.logto.loadbalancer.server.port=3001"
      # Admin (port 3002)
      - "traefik.http.routers.logto-admin.rule=Host(`${LOGTO_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.logto-admin.entrypoints=websecure"
      - "traefik.http.routers.logto-admin.tls=true"
      - "traefik.http.routers.logto-admin.tls.certresolver=myresolver"
      - "traefik.http.routers.logto-admin.service=logto-admin"
      - "traefik.http.services.logto-admin.loadbalancer.server.port=3002"
    healthcheck:
      # Container-local to avoid DNS/TLS dependency during boot
      test: ["CMD-SHELL", "wget -qO- http://localhost:3001/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 40s
    logging: *default-logging

  api:
    image: ghcr.io/hadijaveed/docker-compose-anywhere/app:${IMAGE_TAG:-latest}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_started
    env_file: [ .env ]
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks: [ net ]
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=8000"
      # Drain: mark old container unhealthy, then sleep N seconds (tune N below)
      - "docker-rollout.pre-stop-hook=sh -c 'touch /tmp/drain && sleep 30'"
    # Ensure the process has time to finish requests after SIGTERM as well
    stop_grace_period: 60s
    healthcheck:
      # Fail if /tmp/drain exists; otherwise check the normal health endpoint
      test: [ "CMD-SHELL", "test -f /tmp/drain && exit 1; wget -qO- http://localhost:8000/health >/dev/null 2>&1 || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    logging: *default-logging

  background:
    image: ghcr.io/hadijaveed/docker-compose-anywhere/background:${IMAGE_TAG:-latest}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: [.env]
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks: [net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import sys; sys.exit(0)'"] # TODO: replace with a real queue heartbeat
      interval: 30s
      timeout: 5s
      retries: 10
    logging: *default-logging

  web:
    image: ghcr.io/hadijaveed/docker-compose-anywhere/web:${IMAGE_TAG:-latest}
    depends_on:
      api:
        condition: service_healthy
    networks: [ net ]
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=3001"
      - "docker-rollout.pre-stop-hook=sh -c 'touch /tmp/drain && sleep 20'"
    stop_grace_period: 45s
    healthcheck:
      test: [ "CMD-SHELL", "test -f /tmp/drain && exit 1; wget -qO- http://localhost:3001/health >/dev/null 2>&1 || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    logging: *default-logging

  dozzle:
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dozzle/data:/data
    networks: [net]
    env_file: [.env]
    environment:
      DOZZLE_NO_ANALYTICS: "true"
      DOZZLE_AUTH_PROVIDER: "none"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.routers.dozzle.tls.certresolver=myresolver"
      - "traefik.http.routers.dozzle.service=dozzle"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.dozzle-auth.basicauth.users=${DOZZLE_AUTH}"
      - "traefik.http.routers.dozzle.middlewares=dozzle-auth"
    healthcheck:
      test: ["CMD", "/dozzle", "healthcheck"]
      interval: 3s
      timeout: 30s
      retries: 5
      start_period: 30s
    logging: *default-logging