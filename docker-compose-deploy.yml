x-logging: &default-logging
  driver: json-file
  options:
    max-size: "50m"
    max-file: "6"

networks:
  net:
    driver: bridge

services:
  traefik:
    profiles: ["infra"]
    image: traefik:v3.5
    restart: always
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=net"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/var/lib/platform/letsencrypt:/letsencrypt"
    networks:
      - net
    env_file:
      - /etc/platform/env
    labels:
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
      # redirect middleware deployd.xyz -> WEB_DOMAIN
      - "traefik.http.middlewares.redirect-to-web.redirectregex.regex=^https://(${DOMAIN})/?(.*)"
      - "traefik.http.middlewares.redirect-to-web.redirectregex.replacement=https://${WEB_DOMAIN}/$${2}"
      - "traefik.http.middlewares.redirect-to-web.redirectregex.permanent=true"
      # apex router
      - "traefik.http.routers.apex.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.apex.entrypoints=websecure"
      - "traefik.http.routers.apex.tls=true"
      - "traefik.http.routers.apex.tls.certresolver=myresolver"
#      - "traefik.http.routers.apex.service=noop@internal" # If you prefer redirect
      - "traefik.http.routers.apex.service=web"
      - "traefik.http.routers.apex.middlewares=redirect-to-web@docker"
    logging: *default-logging

  dozzle:
    profiles: ["infra"]
    image: amir20/dozzle:v8.14
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/platform/dozzle:/data
    networks:
      - net
    env_file:
      - /etc/platform/env
    environment:
      DOZZLE_NO_ANALYTICS: "true"
      DOZZLE_AUTH_PROVIDER: "none"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.routers.dozzle.rule=Host(`${DOZZLE_DOMAIN}`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.routers.dozzle.tls.certresolver=myresolver"
      - "traefik.http.routers.dozzle.service=dozzle"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
      # BasicAuth
      - "traefik.http.middlewares.dozzle-basicauth.basicauth.users=${DOZZLE_BASIC_AUTH}"
      - "traefik.http.routers.dozzle.middlewares=dozzle-basicauth@docker"
    healthcheck:
      test: [ "CMD", "/dozzle", "healthcheck" ]
    logging: *default-logging

  db:
    profiles: ["infra"]
    image: encoredotdev/postgres:15
    restart: always
    volumes:
      - /var/lib/platform/postgres:/var/lib/postgresql/data
      - /opt/platform/scripts/db:/docker-entrypoint-initdb.d
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      # Used by scripts/db/pg-init.sh
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
      - DB_ADMIN_USER=${DB_ADMIN_USER}
      - DB_ADMIN_PASSWORD=${DB_ADMIN_PASSWORD}
      - DB_ADMIN_ACCESS=${DB_ADMIN_ACCESS}
      - LOGTO_DB_NAME=${POSTGRES_LOGTO_DB}
    networks:
      - net
    env_file:
      - /etc/platform/env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    logging: *default-logging

  redis:
    profiles: ["infra"]
    image: redis:8
    restart: always
    volumes:
      - /var/lib/platform/redis:/data
    networks:
      - net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    logging: *default-logging

  logto:
    profiles: ["infra"]
    image: ghcr.io/logto-io/logto:1.31
    restart: always
    depends_on:
      - db
    entrypoint: ["sh", "-c", "./packages/cli/custom-setup/entrypoint.sh"]
    environment:
      - TRUST_PROXY_HEADER=1
      - ENDPOINT=https://${LOGTO_DOMAIN}
      - ADMIN_ENDPOINT=https://${LOGTO_ADMIN_DOMAIN}
      - DB_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/logto
      # App Specific
      - APP_NAME=platform
      - APP_DESCRIPTION=Baseline for organization workflows automation
      - APP_URI=${WEB_DOMAIN}
      - APP_URL=https://${WEB_DOMAIN}
      # Logto Specific
      - LOGTO_APP_ID=${LOGTO_APP_ID}
      - LOGTO_APP_SECRET=${LOGTO_APP_SECRET}
      - LOGTO_APP_API_RESOURCE=https://${API_DOMAIN}/api
      - LOGTO_APP_API_EVENT_WEBHOOK_URL=https://${API_DOMAIN}/api/stripe/logto/webhook
      - LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY=${LOGTO_APP_API_EVENT_WEBHOOK_SIGNING_KEY}
      - LOGTO_MANAGEMENT_API_RESOURCE=https://${LOGTO_DOMAIN}/api
      - LOGTO_MANAGEMENT_API_APPLICATION_ID=${LOGTO_MANAGEMENT_API_APPLICATION_ID}
      - LOGTO_MANAGEMENT_API_APPLICATION_SECRET=${LOGTO_MANAGEMENT_API_APPLICATION_SECRET}
      - LOGTO_GOOGLE_CONNECTOR_ID=${LOGTO_GOOGLE_CONNECTOR_ID}
      - LOGTO_GOOGLE_CLIENT_ID=${LOGTO_GOOGLE_CLIENT_ID}
      - LOGTO_GOOGLE_CLIENT_SECRET=${LOGTO_GOOGLE_CLIENT_SECRET}
    volumes:
      - /opt/platform/scripts/logto:/etc/logto/packages/cli/custom-setup:ro
    networks:
      - net
    env_file:
      - /etc/platform/env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      # Core (port 3001)
      - "traefik.http.routers.logto.rule=Host(`${LOGTO_DOMAIN}`)"
      - "traefik.http.routers.logto.entrypoints=websecure"
      - "traefik.http.routers.logto.tls=true"
      - "traefik.http.routers.logto.tls.certresolver=myresolver"
      - "traefik.http.routers.logto.service=logto"
      - "traefik.http.services.logto.loadbalancer.server.port=3001"
      # Admin (port 3002)
      - "traefik.http.routers.logto-admin.rule=Host(`${LOGTO_ADMIN_DOMAIN}`)"
      - "traefik.http.routers.logto-admin.entrypoints=websecure"
      - "traefik.http.routers.logto-admin.tls=true"
      - "traefik.http.routers.logto-admin.tls.certresolver=myresolver"
      - "traefik.http.routers.logto-admin.service=logto-admin"
      - "traefik.http.services.logto-admin.loadbalancer.server.port=3002"
    healthcheck:
      # Return 0 only if we get HTTP 204
      test: [ "CMD-SHELL", "apk add --no-cache curl >/dev/null 2>&1 || true; code=$(curl -fsS -o /dev/null -w '%{http_code}' http://127.0.0.1:3001/api/status || echo x); [ \"$code\" = \"204\" ]" ]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 40s
    logging: *default-logging

  pgweb:
    profiles: ["infra"]
    image: sosedoff/pgweb:0.16.2
    restart: always
    ports:
      - "127.0.0.1:8081:8081"
    environment:
      - PGWEB_DATABASE_URL=postgres://${DB_ADMIN_USER}:${DB_ADMIN_PASSWORD}@db:5432/${POSTGRES_LOGTO_DB}?sslmode=disable
    depends_on:
      - db
    networks:
      - net
    env_file:
      - /etc/platform/env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=net"
      - "traefik.http.services.pgweb.loadbalancer.server.port=8081"
      - "traefik.http.routers.pgweb.rule=Host(`${PGWEB_DOMAIN}`)"
      - "traefik.http.routers.pgweb.entrypoints=websecure"
      - "traefik.http.routers.pgweb.tls=true"
      - "traefik.http.routers.pgweb.tls.certresolver=myresolver"
      - "traefik.http.routers.pgweb.service=pgweb"
      # BasicAuth
      - "traefik.http.middlewares.pgweb-basicauth.basicauth.users=${PGWEB_BASIC_AUTH}"
      - "traefik.http.routers.pgweb.middlewares=pgweb-basicauth@docker"

  api:
    profiles: ["app"]
    image: ghcr.io/bartekus/platform/api:${IMAGE_TAG:-latest}
    restart: always
    depends_on:
      - db
      - redis
      - traefik
    env_file:
      - /etc/platform/env
    environment:
      - API_DOMAIN=${API_DOMAIN}
      - LOGTO_APP_ID=${LOGTO_APP_ID}
      - LOGTO_DOMAIN=${LOGTO_DOMAIN}
    networks:
      - net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${API_DOMAIN}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=8080"
    stop_grace_period: 60s
    healthcheck:
      test: ["CMD", "true"]
#      test: ["CMD-SHELL", "test -f /tmp/drain && exit 1; wget -qO- http://localhost:8080/health >/dev/null 2>&1 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    logging: *default-logging

#  background:
#    profiles: ["app"]
#    image: ghcr.io/bartekus/platform/background:${IMAGE_TAG:-latest}
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    env_file:
#      - /etc/platform/env
#    environment:
#      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
#      - REDIS_HOST=redis
#      - REDIS_PORT=6379
#    networks:
#      - net
#    restart: always
#    healthcheck:
#      test: ["CMD-SHELL", "python -c 'import sys; sys.exit(0)'"]
#      interval: 30s
#      timeout: 5s
#      retries: 10
#    logging: *default-logging

  web:
    profiles: ["app"]
    image: ghcr.io/bartekus/platform/web:${IMAGE_TAG:-latest}
    restart: always
    depends_on:
      - api
    env_file:
      - /etc/platform/env
    environment:
      - LOGTO_APP_ID=${LOGTO_APP_ID}
      - LOGTO_DOMAIN=${LOGTO_DOMAIN}
      - API_DOMAIN=${API_DOMAIN}
      - WEB_DOMAIN=${WEB_DOMAIN}
    networks:
      - net
    labels:
      - "traefik.enable=true"

      # --- Security headers middleware (HTTPS responses)
      - "traefik.http.middlewares.secure-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.secure-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.secure-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.secure-headers.headers.referrerPolicy=strict-origin-when-cross-origin"
      # Use Traefik's native CSP field (clearer than customResponseHeaders)
      - "traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=upgrade-insecure-requests; block-all-mixed-content"

      # --- HTTP -> HTTPS redirect middleware
      - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"

      # --- HTTP router (redirect only)
      - "traefik.http.routers.web-redirect.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.web-redirect.entrypoints=web"
      - "traefik.http.routers.web-redirect.middlewares=redirect-https@docker"
      - "traefik.http.routers.web-redirect.service=web"  # points to same service

      # --- HTTPS router (serve app + headers)
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls=true"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.routers.web.middlewares=secure-headers@docker"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    stop_grace_period: 45s
    healthcheck:
#      test: ["CMD", "true"]
      test: ["CMD-SHELL", "wget -q -O - http://127.0.0.1:80/ >/dev/null 2>&1"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 20s
    logging: *default-logging
